{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red96\green96\blue96;\red0\green115\blue0;
\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf0 \
~dakis = \cf2 NetAddr\cf0 .new(\cf3 "192.168.111.3"\cf0 , 57120);\
~mitsos = \cf2 NetAddr\cf0 .new(\cf3 "192.168.1.3"\cf0 , 57120);\
\
\cf2 MIDIClient\cf0 .init;\
\cf2 MIDIIn\cf0 .connect;\
v = \cf2 MIDIOut\cf0 .newByName(\cf3 "USB Uno MIDI Interface"\cf0 , \cf3 "USB Uno MIDI Interface"\cf0 );\
\
\
~mitsos.sendMsg(\cf4 \\vKick\cf0 );\
~mitsos.sendMsg(\cf4 \\vDrum1\cf0 );\
~mitsos.sendMsg(\cf4 \\vDrum2\cf0 );\
~mitsos.sendMsg(\cf4 \\vMulti\cf0 );\
~mitsos.sendMsg(\cf4 \\vSnare\cf0 );\
~mitsos.sendMsg(\cf4 \\vHihat1c\cf0 );\
~mitsos.sendMsg(\cf4 \\vHihat1o\cf0 );\
~mitsos.sendMsg(\cf4 \\vHihat2c\cf0 );\
~mitsos.sendMsg(\cf4 \\vHihat2o\cf0 );\
~mitsos.sendMsg(\cf4 \\vClap\cf0 );\
\
~mitsos.sendMsg(\cf4 \\d1on\cf0 );\
~mitsos.sendMsg(\cf4 \\d1off\cf0 );\
~mitsos.sendMsg(\cf4 \\d1ctrl\cf0 );\
\
\
~dakis.sendMsg(\cf4 \\d2reset\cf0 );\
\
\
\
~amp2 = \cf2 PatternProxy\cf0 ( \
	\cf2 Pseq\cf0 ([ \
		\cf2 Pseq\cf0 ([120, 0, 50, 0, 0.0, 40, 0, 120] , 3),\
		\cf2 Prand\cf0 ([0.5, 0, 0.0, 0, 0.4, 0.8, 0, 0.6] , 1)\
		], \
	\cf2 inf\cf0 ).asStream \
);\
\
~amp2Spec = \cf2 ControlSpec\cf0 (0, 127, \cf4 \\lin\cf0 );\
\
~fad2 =\'a0\cf2 OSCresponderNode\cf0 (\cf2 nil\cf0 ,\'a0\cf4 '/outs/test1'\cf0 , \{\'a0|t,r,m|\'a0\
	\cf2 var\cf0 \'a0n1;\
	n1\'a0= (m[1]);\
	~amp2.source = ~amp2Spec.map(m[1]) \
\}).add;\
\
~amp2.source =  \cf2 Pseq\cf0 (\
	[\
	 \cf2 Pseq\cf0 ([127, 127, 117, 27, 12, 87, 120, 60] , 3),\
	 \cf2 Prand\cf0 ([0.0, 0, 1, 0, 0.4, 0.8, 0, 0.6] , 4)\
	 ], \
	 \cf2 inf\cf0 \
); \
\
\
~fad2 =\'a0\cf2 OSCresponderNode\cf0 (\cf2 nil\cf0 ,\'a0\cf4 '/outs/test1'\cf0 , \{\'a0|t,r,m|\'a0\
	\cf2 var\cf0 \'a0n1;\
	n1\'a0= (m[1]);\
	~amp2.source = ~amp2Spec.map(m[1]) \
\}).add;\
\
(\
fork\{\
	\cf2 inf\cf0 .do\{\cf2 |i|\cf0 \
		\cf2 var\cf0  dur = \cf2 Pseq\cf0 ([0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25]/4, \cf2 inf\cf0 ).asStream;\
		v.noteOn(1, ~kick, 60);\
		dur.next.wait;\
		\
		\
	\};\
	\
\};\
)\
\
~amp2 = \cf2 PatternProxy\cf0 ( \
	\cf2 Pseq\cf0 ([ \
		\cf2 Pseq\cf0 ([120, 0, 50, 0, 0.0, 40, 0, 120] , 3),\
		\cf2 Prand\cf0 ([0.5, 0, 0.0, 0, 0.4, 0.8, 0, 0.6] , 1)\
		], \
	\cf2 inf\cf0 )\
).asStream;\
\
\
\
\
~amp2 =\cf2 Pdef\cf0 (\cf4 \\trest\cf0 , \
	\cf2 Pseq\cf0 ([ \
		\cf2 Pseq\cf0 ([120, 0, 50, 0, 0.0, 40, 0, 120] , 3),\
		\cf2 Prand\cf0 ([0.5, 0, 0.0, 0, 0.4, 0.8, 0, 0.6] , 1)\
		], \
	\cf2 inf\cf0 )\
).play.asStream;\
\
~amp2 =\cf2 Pdef\cf0 (\cf4 \\trest\cf0 , \
	\cf2 Pseq\cf0 ([ \
		\cf2 Pseq\cf0 ([120, 180, 150, 110, 300, 40, 70, 120] , 3),\
		\cf2 Prand\cf0 ([0.5, 0, 0.0, 0, 0.4, 0.8, 0, 0.6] , 1)\
		], \
	\cf2 inf\cf0 )\
).asStream;\
\
\
~amp2 = \cf2 PatternProxy\cf0 ( \
	\cf2 Pseq\cf0 ([ \
		\cf2 Pseq\cf0 ([120, 0, 50, 0, 0.0, 40, 0, 120] , 3),\
		\cf2 Prand\cf0 ([0.5, 0, 0.0, 0, 0.4, 0.8, 0, 0.6] , 1)\
		], \
	\cf2 inf\cf0 )\
).asStream;\
\
(\
\cf2 Routine\cf0 \{\
	\cf2 inf\cf0 .do\{\
		\
		fork\{\
			~dur = \cf2 Pseq\cf0 ([0.25]/4, \cf2 inf\cf0 ).asStream;\
			~inst = \cf2 Pseq\cf0 ([~kick, ~drum1, ~drum2], \cf2 inf\cf0 ).asStream;\
			8.do\{\cf2 |i|\cf0 \
				v.noteOn(1, ~inst.next, ~amp2.next);\
				~dur.next.wait;\
				\
				\
			\};\
			\
		\};\
		\
		0.5.wait;\
	\
		v.noteOn(1, ~kick, ~amp2.next);\
		0.25.wait;\
		v.noteOn(1, ~hihat1c, ~amp2.next);\
		0.5.wait;\
	\
	\
		fork\{\
			8.do\{\cf2 |i|\cf0 \
				\cf2 var\cf0  dur = \cf2 Pseq\cf0 ([0.25]/4, \cf2 inf\cf0 ).asStream;\
				v.noteOn(1, ~hihat2c, ~amp2.next);\
				dur.next.wait;\
				\
				\
			\};\
			\
		\};\
		0.25.wait;\
		v.noteOn(1, ~snare, ~amp2.next);\
		0.5.wait;\
	\
	\
	\
	\};\
\}.play;\
)\
\
\
\
\
\
\
(\
~lfo01 = \{\
	~dur = \cf2 Pseq\cf0 ([0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25]*4, \cf2 inf\cf0 ).asStream; \
	4.do\{\
		\
		~dakis.sendMsg(\cf4 \\d2reset\cf0 );		\
\
		~dur.next.wait;\
		\
		\
	\};\
		\
\}.fork;\
\
)\
\
\
~cemb01.stop;\
~cemb01 = \cf2 Posc\cf0 (\
	\cf4 \\msg\cf0 , \cf2 Pseq\cf0 (\
		[\
		\cf5 //cember\cf0 \
		\cf4 \\kk1\cf0 , \cf4 \\kk23\cf0 , \cf4 \\kk24\cf0 , \
		\cf4 \\kk25\cf0 , \cf4 \\kk26\cf0 , \cf4 \\kk27\cf0 , \
		\cf4 \\kk28\cf0 , \cf4 \\kk29\cf0 , \cf4 \\kk30\cf0 ,\
		\cf4 \\kk31\cf0 , \cf4 \\kk32\cf0 , \cf4 \\kk33\cf0 , \
		\cf4 \\kk34\cf0 , \cf4 \\kk35\cf0 , \cf4 \\kk36\cf0 , \cf4 \\kk37\cf0 \
		], \cf2 inf\cf0 \
	),\
	\cf4 \\dur\cf0 , \cf2 Pseq\cf0 (\
		[\
		\cf5 //cember\cf0 \
		\cf2 Pseq\cf0 ([2, 1, 1], 1),\
		\cf2 Pseq\cf0 ([2, 1, 1], 1),\
		\cf2 Pseq\cf0 ([2, 2, 2], 1),\
		\cf2 Pseq\cf0 ([2, 2, 2], 1),\
		\cf2 Pseq\cf0 ([1, 1, 1, 1], 1)\
		]/2, 4\
	)\
).play;\
\
~verm01.stop;\
~verm01 = \cf2 Posc\cf0 (\
	\cf4 \\msg\cf0 , \cf2 Pseq\cf0 (\
		[\
		\cf5 //cember\cf0 \
		\cf4 \\vKick\cf0 , \cf4 \\vDrum1\cf0 , \cf4 \\vDrum2\cf0 , \
		\cf4 \\vKick\cf0 , \cf4 \\vDrum1\cf0 , \cf4 \\vDrum2\cf0 , \
		\cf4 \\vDrum2\cf0 , \cf4 \\vDrum1\cf0 , \cf4 \\vDrum1\cf0 ,\
		\cf4 \\vKick\cf0 , \cf4 \\es\cf0 , \cf4 \\vDrum21\cf0 , \
		\cf4 \\vKick\cf0 , \cf4 \\vDrum2\cf0 , \cf4 \\vKick\cf0 , \cf4 \\vDrum1\cf0 \
		], \cf2 inf\cf0 \
	),\
	\cf4 \\dur\cf0 , \cf2 Pseq\cf0 (\
		[\
		\cf5 //cember\cf0 \
		\cf2 Pseq\cf0 ([2, 1, 1], 1),\
		\cf2 Pseq\cf0 ([2, 1, 1], 1),\
		\cf2 Pseq\cf0 ([2, 2, 2], 1),\
		\cf2 Pseq\cf0 ([2, 2, 2], 1),\
		\cf2 Pseq\cf0 ([1, 1, 1, 1], 1)\
		]/4, 4\
	)\
).play;\
\
\cf2 Server\cf0 .default.queryAllNodes; \
}