//:Cut Motion
// Aris Bezas Thu, 28 July 2011, 14:24
//:----------
//:Define Global Variables
~numImg = 91;
~width = 1280;
~height = 1024;
~delay = 0.01;
~group = \CASTLE1;
~group = \CASTLEN;

//:====================
//:Amplitude detection
//:====================

s.boot.doWhenBooted {
	// Prepare the buffers
	b = Buffer.alloc(s, 512);
	// Feel free to load a more interesting clip!
	// a11wlk01 is not an ideal example of musical onsets.
	d = Buffer.read(s, "sounds/a11wlk01.wav");
};


//:fft and send reply
x = { | threshold = 0.9, out = 100 |
	var sig, chain, onsets, pips;
	
	// A simple generative signal
	//sig = LPF.ar(Pulse.ar(TIRand.kr(63,75,Impulse.kr(2)).midicps), LFNoise2.kr(0.5).exprange(100, 10000)) * Saw.ar(2).range(0, 1);
	// or, uncomment this line if you want to play the buffer in
	//sig = PlayBuf.ar(1, d, BufRateScale.kr(d), loop: 1);

	sig = In.ar(8);	
	chain = FFT(b, sig);

	onsets = Onsets.kr(chain, threshold, \rcomplex);
	SendReply.kr(onsets, \onset);
	// You'll hear percussive "ticks" whenever an onset is detected
	//pips = WhiteNoise.ar(EnvGen.kr(Env.perc(0.001, 0.1, 0.2), onsets));
	//Out.ar(out, Pan2.ar(pips, 0.75, 1));

}.play;

//:set threshold
x.set(\threshold, 0.9);
//:free onset
x.free; // Free the synth
//:amp trigger responder
r = OSCresponder(nil, \onset, {
	"onset".postln;
	NetAddr("127.0.0.1", 57120).sendMsg(\onset);
//	NetAddr("192.0.0.21", 57120).sendMsg(\onset);	
}).add;

//:Trigger-responder-old
r = OSCresponder.new(nil, "onset", { 
	arg time, resp, msg; 
	"ok".postln;
	OF.img(rrand(0,85).asInteger,0,0,~width, ~height);
	} ).add; 

//:----
{
	inf.do {
		85.do { |i|
			OF.img(i.asInteger,0,0,~width, ~height);
			0.01.wait;
		};
	};
}.fork;
//:Random Rotate Images
{
	inf.do{
			OF.img(rrand(0,12).asInteger,rrand(0,1280),rrand(0,780),rrand(400,1280),rrand(400,780),rrand(0,360),rrand(0,360),rrand(0,360));
	0.1.wait;
	}
}.fork;
//:Random smal Rotate Images
{
	inf.do{
			OF.img(rrand(0,59).asInteger,rrand(0,1280),rrand(0,780),rrand(100,280),rrand(100,280),rrand(0,360),rrand(0,360),rrand(0,360));
	rrand(0.01, 0.05).wait;
	}
}.fork;

//:Rotate Images
{
	inf.do{|i|
		OF.img(rrand(0,484).asInteger, ~width/2, ~height/2, 400,400, i,i,0);
		0.005.wait;
	}
}.fork;

//:Control delay

{
	inf.do {
		95.do { |i|
			OF.img(i.asInteger,0,0,~width, ~height);
			~delay.wait;
		};
	};
}.fork

//:Random
{
	inf.do {
		OF.img(rrand(0,95).asInteger,0,0,~width, ~height);
		~delay.wait;
	};
}.fork;
//:Random size
{
	inf.do {
		OF.img(rrand(0,95).asInteger,rrand(0,1280),rrand(0,780),rrand(400,1280),rrand(400,780));
		~delay.wait;
	};
}.fork

//:Task-CutMotion
~delay = 0.01;
~cutMotion = Task({
	inf.do {
		10.do { |i|
			OF.img(i,0,0,1280,720);
			~delay.wait;
		};
	};
});
//:Play Task
~cutMotion.play;
//:Release Task
~cutMotion.stop;



//:-----
/*
Prepering Aferesi performance

Aris Bezas Wed, 01 June 2011, 23:24
*/

OF.loadImage(0, "/Users/fou/images/pixxilation/0000.JPG");

OF.loadImage(1, "/Users/fou/images/pixxilation/0011.JPG");

OF.img(1,0,0,1280,720);

OF.img(0,0,0,200,200);


OF.img(1,0,0,600,600);
OF.img(0,0,0,800,600);
//:mirrow effect	
OF.int("sketch",1);
OF.int("pixelate",1);
OF.int("alphaSketch",3);
OF.int("edgeDetection",1);
//:Collage
k = {
	~delayTime = 0.1;
	~countX = 0; 
	~countY = 0;
	~fotoWidth = ~fotoHeight = ~width/20;
	~fotoHeight = ~fotoWidth;
	inf.do{
	60.do{ |i|
		OF.img(i, ~countX, ~countY, ~fotoWidth, ~fotoHeight);
		~countX = ~countX + ~fotoWidth;
		if (~countX>~width, {~countX = 0;~countY = ~countY + ~fotoHeight});
		if (~countY>~height, {~countY = 0;});
		~delayTime.wait;
	}
	}
	
}.fork 
//:Small random position
k = {
	~delayTime = 0.02;
	~countX = 0; 
	~countY = 0;
	~screenWidth = 1280;
	~screenHeight = 720;
	~fotoWidth = ~fotoHeight = ~screenWidth/20;
	~fotoHeight = ~fotoWidth;
	inf.do{
	475.do{ |i|
		i.postln;		
		OF.img(95.rand.asInteger, ~screenWidth.rand,  ~screenHeight.rand, 100, 100*720/1280);
		~delayTime.wait;
	}
	}
	
}.fork 


//:Small random position  random size
k = {
	OF.img(0,0,0,1280,720);
	~delayTime = 0.02;
	~countX = 0; 
	~countY = 0;
	~screenWidth = 1280;
	~screenHeight = 720;
	~fotoWidth = ~fotoHeight = ~screenWidth/20;
	~fotoHeight = ~fotoWidth;
	inf.do{
	186.do{ |i|
		i.postln;		
		OF.img(185.rand.asInteger, ~screenWidth.rand,  ~screenHeight.rand, 1000.rand, 600.rand);
		~delayTime.wait;
	}
	}
	
}.fork 

//:Center Slide show
~delayTime = 0.01;
k = {
	~delayTime = 0.05;
	~countX = 0; 
	~countY = 0;
	~screenWidth = 1280;
	~screenHeight = 780;
	~fotoWidth = ~fotoHeight = ~screenWidth/20;
	~fotoHeight = ~fotoWidth;
	inf.do{
		186.do{ |i|
			186.postln;		
			OF.img(i, 0,0, ~screenWidth, ~screenHeight);
			~delayTime.wait;
		}
	}
	
}.fork 
//:Random Slide show
~delayTime = 0.01;
k = {
	~delayTime = 0.1;
	~countX = 0; 
	~countY = 0;
	~screenWidth = 1280;
	~screenHeight = 780;
	~fotoWidth = ~fotoHeight = ~screenWidth/20;
	~fotoHeight = ~fotoWidth;
	inf.do{
		186.do{ |i|
			186.postln;		
			OF.img(186.rand.asInteger, 0,0, ~screenWidth, ~screenHeight);
			~delayTime.wait;
		}
	}
	
}.fork 

//:Many images
k = {
	~delayTime = 0.01;
	~countX = 0; 
	~countY = 0;
	~screenWidth = 1280;
	~screenHeight = 780;
	~fotoWidth = ~fotoHeight = ~screenWidth/20;
	~fotoHeight = ~fotoWidth;
	
	inf.do{ |i|
				
		OF.img((0..200).choose.round, ~countX, ~countY, ~fotoWidth, ~fotoHeight);
		~countX = ~countX + ~fotoWidth;
		if (~countX>~screenWidth, {~countX = 0;~countY = ~countY + ~fotoHeight});
		if (~countY>~screenHeight, {~countY = 0;});
		~delayTime.wait;
	}
	
}.fork 
//:--

OF.int("yPosImage", 100)
OF.int("xPosImage", 100)
OF.int("wImg", 100 rrand: 500)
OF.int("mirrorMode",0);
//:Create Synth from function
a = SynthDef(\synthFunc, { |delayTime = 0.01, countX = 0, countY = 0, screenWidth = 1280, screenHeight = 1024, fotoWidth, fotoHeight|
	
	fotoWidth = screenWidth/20;
	fotoHeight = screenWidth/20;
	10.do{ |i|
				
//		OF.img((0..60).choose.round, countX, countY, fotoWidth, fotoHeight);
//		countX = countX + fotoWidth;
//		if (countX>screenWidth, {countX = 0;countY = countY + fotoHeight});
//		if (countY>screenHeight, {countY = 0;});
		//delayTime.wait;
	}

	
	
	}).send(s);

//:Play with width and height
k = {
	inf.do	{
	OF.int("wImg", 100 rrand: 1500);
	OF.int("hImg", 100 rrand: 1500);			
	0.3.wait
	}
	
}.fork;
//:Play with width and height
k = {
	inf.do	{ |i|
	OF.int("wImg", i);
	OF.int("hImg", i);			
	0.3.wait
	}
	
}.fork;

//:Precieve
Preceive(
	'af1' -> {
		OF.img("af1",0,0,100,100);
		},
	'af2' -> {
		OF.img("af2");
		},
	'af3' -> {
		OF.img("af3");
		},
	'af4' -> {
		OF.img("af4");
		},
	'af5' -> {
		OF.img("af5");
		},
	'af6' -> {
		OF.img("af6");
		},
	'af7' -> {
		OF.img("af7");
		},
	'2' -> {
		~klk = Synth("over", [
			\atk, 0.5,
			\sus, 1,
			\rel, 4,
			\pan, 1.0.rand2,
			\freqs,  {6000.0.linrand+80}.dup(12),
			\rings, {0.1.rrand(3)}.dup(12)
		]);
		}
).play;


//:Play Pdef
Pdef(\klank).play;	
Pdef(\fullScreen).play;	
//:Fill the screen with a foto
Pdef(\fullScreen, Posc(
		\msg, Pseq([['img', 0, 0, 0, 600,600]], inf),
		\dur, Pseq([~duyekDur], inf),
		\dest,  [NetAddr.localAddr, NetAddr("localhost", 12345)]
		)
	);
	
//:Duyek
a = Pdef(\klank, Posc(
		\msg, Pseq([\af1, \af2, \af3, \af4, \af5, \af6, \af7], inf),
		\dur, Pseq([~duyekDur]*0.1, inf),
		\dest,  [NetAddr.localAddr, NetAddr("localhost", 12345)]
		)
	);
//:duyekKudDur
Pdef(\klank, Posc(
		\msg, Pseq([\af1, \af2], inf),
		\dur, Pseq([~duyekKudDur]*0.5, inf),
		\dest,  [NetAddr.localAddr, NetAddr("localhost", 12345)]
		)
	);

//:Posc with predefine TempoClock
Pdef(\klank, Posc(
		\msg, Pseq([\1, \2, \3, \4], inf),
		\dur, Pseq([~duyekDur]*4, inf),
		\dest,  [NetAddr.localAddr, NetAddr("localhost", 12345)]
		)
	).play(~clock1);
//:Other

Posc.play(
	[0,1,2,3,4],
	\dur, 2
	
);
//:--
10.do{OF.img(rrand(0,95).asInteger,rrand(0,1280),rrand(0,780),rrand(400,1280),rrand(400,780));}
//:--
OF.loadImage(1,"/Users/fou/images/pixxilation/0000.JPG");

//:cut Motion fullscreen routine
{
	1500.do{
		OF.img(rrand(0,30).asInteger, 0, 0, 1280, 1024);
		0.1.wait;
	}
}.fork;

//:cut Motion center routine
{
	1500.do{
		OF.img(rrand(0,30).asInteger, 0, 0, 1280, 1024);
		0.01.wait;
	}
}.fork;

//:cut Motion rotate routine
{
	1500.do{ |i|
		OF.img(rrand(0,30).asInteger, 0, 0, 1280, 1024, i,i,i);
		0.01.wait;
	}
}.fork;

